// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import internal "github.com/kyma-project/helm-broker/internal"
import mock "github.com/stretchr/testify/mock"

// bindOperationStorage is an autogenerated mock type for the bindOperationStorage type
type bindOperationStorage struct {
	mock.Mock
}

// Get provides a mock function with given fields: iID, bID, opID
func (_m *bindOperationStorage) Get(iID internal.InstanceID, bID internal.BindingID, opID internal.OperationID) (*internal.BindOperation, error) {
	ret := _m.Called(iID, bID, opID)

	var r0 *internal.BindOperation
	if rf, ok := ret.Get(0).(func(internal.InstanceID, internal.BindingID, internal.OperationID) *internal.BindOperation); ok {
		r0 = rf(iID, bID, opID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.BindOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.InstanceID, internal.BindingID, internal.OperationID) error); ok {
		r1 = rf(iID, bID, opID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: iID
func (_m *bindOperationStorage) GetAll(iID internal.InstanceID) ([]*internal.BindOperation, error) {
	ret := _m.Called(iID)

	var r0 []*internal.BindOperation
	if rf, ok := ret.Get(0).(func(internal.InstanceID) []*internal.BindOperation); ok {
		r0 = rf(iID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internal.BindOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.InstanceID) error); ok {
		r1 = rf(iID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: bo
func (_m *bindOperationStorage) Insert(bo *internal.BindOperation) error {
	ret := _m.Called(bo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*internal.BindOperation) error); ok {
		r0 = rf(bo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: iID, bID, opID
func (_m *bindOperationStorage) Remove(iID internal.InstanceID, bID internal.BindingID, opID internal.OperationID) error {
	ret := _m.Called(iID, bID, opID)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.InstanceID, internal.BindingID, internal.OperationID) error); ok {
		r0 = rf(iID, bID, opID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateState provides a mock function with given fields: iID, bID, opID, state
func (_m *bindOperationStorage) UpdateState(iID internal.InstanceID, bID internal.BindingID, opID internal.OperationID, state internal.OperationState) error {
	ret := _m.Called(iID, bID, opID, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.InstanceID, internal.BindingID, internal.OperationID, internal.OperationState) error); ok {
		r0 = rf(iID, bID, opID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStateDesc provides a mock function with given fields: iID, bID, opID, state, desc
func (_m *bindOperationStorage) UpdateStateDesc(iID internal.InstanceID, bID internal.BindingID, opID internal.OperationID, state internal.OperationState, desc *string) error {
	ret := _m.Called(iID, bID, opID, state, desc)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.InstanceID, internal.BindingID, internal.OperationID, internal.OperationState, *string) error); ok {
		r0 = rf(iID, bID, opID, state, desc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
