// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import internal "github.com/kyma-project/helm-broker/internal"
import mock "github.com/stretchr/testify/mock"

// addonStorage is an autogenerated mock type for the addonStorage type
type addonStorage struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: namespace
func (_m *addonStorage) FindAll(namespace internal.Namespace) ([]*internal.Addon, error) {
	ret := _m.Called(namespace)

	var r0 []*internal.Addon
	if rf, ok := ret.Get(0).(func(internal.Namespace) []*internal.Addon); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internal.Addon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.Namespace) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: namespace, id
func (_m *addonStorage) GetByID(namespace internal.Namespace, id internal.AddonID) (*internal.Addon, error) {
	ret := _m.Called(namespace, id)

	var r0 *internal.Addon
	if rf, ok := ret.Get(0).(func(internal.Namespace, internal.AddonID) *internal.Addon); ok {
		r0 = rf(namespace, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Addon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.Namespace, internal.AddonID) error); ok {
		r1 = rf(namespace, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
