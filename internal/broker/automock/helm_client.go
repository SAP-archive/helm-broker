// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import chart "helm.sh/helm/v3/pkg/chart"
import internal "github.com/kyma-project/helm-broker/internal"
import mock "github.com/stretchr/testify/mock"
import release "helm.sh/helm/v3/pkg/release"

// helmClient is an autogenerated mock type for the helmClient type
type helmClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *helmClient) Delete(_a0 internal.ReleaseName, _a1 internal.Namespace) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.ReleaseName, internal.Namespace) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Install provides a mock function with given fields: c, cv, releaseName, namespace
func (_m *helmClient) Install(c *chart.Chart, cv internal.ChartValues, releaseName internal.ReleaseName, namespace internal.Namespace) (*release.Release, error) {
	ret := _m.Called(c, cv, releaseName, namespace)

	var r0 *release.Release
	if rf, ok := ret.Get(0).(func(*chart.Chart, internal.ChartValues, internal.ReleaseName, internal.Namespace) *release.Release); ok {
		r0 = rf(c, cv, releaseName, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*chart.Chart, internal.ChartValues, internal.ReleaseName, internal.Namespace) error); ok {
		r1 = rf(c, cv, releaseName, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
