package automock

import io "io"
import mock "github.com/stretchr/testify/mock"
import ybundle "github.com/kyma-project/kyma/components/helm-broker/internal/ybundle"

// repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}

// BundleReader provides a mock function with given fields: name, version
func (_m *Repository) BundleReader(name ybundle.BundleName, version ybundle.BundleVersion) (io.Reader, func(), error) {
	ret := _m.Called(name, version)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(ybundle.BundleName, ybundle.BundleVersion) io.Reader); ok {
		r0 = rf(name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 func()
	if rf, ok := ret.Get(1).(func(ybundle.BundleName, ybundle.BundleVersion) func()); ok {
		r1 = rf(name, version)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(ybundle.BundleName, ybundle.BundleVersion) error); ok {
		r2 = rf(name, version)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IndexReader provides a mock function with given fields:
func (_m *Repository) IndexReader() (io.Reader, func(), error) {
	ret := _m.Called()

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func() io.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 func()
	if rf, ok := ret.Get(1).(func() func()); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
